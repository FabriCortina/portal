// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          String
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Tenant {
  id            String         @id @default(uuid())
  name          String
  users         User[]
  collaborators Collaborator[]
  sheetConfigs  SheetConfig[]
  metrics       Metric[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Client {
  id            String         @id @default(uuid())
  name          String
  collaborators Collaborator[]
  metrics       Metric[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Collaborator {
  id            String    @id @default(uuid())
  tenantId      String
  clientId      String?
  name          String
  role          String
  dni           String
  cuit          String
  sooftEmail    String?
  personalEmail String?
  isActive      Boolean   @default(true)
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  client        Client?   @relation(fields: [clientId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([tenantId, name])
}

model SheetConfig {
  id              String    @id @default(uuid())
  tenantId        String
  spreadsheetId   String
  sheetName       String
  range           String
  updateFrequency String
  lastSyncDate    DateTime?
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([tenantId])
}

model Metric {
  id            String    @id @default(uuid())
  tenantId      String
  clientId      String?
  type          String
  value         Float
  marketMetrics Json?      // <<--- Este campo opcional para flexibilidad
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  client        Client?   @relation(fields: [clientId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

